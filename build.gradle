/*
   Project JaCaMo web

   Gradle build file for JaCaMo Applications
   October 15, 2019
*/

defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group   'org.jacamo'
version '0.2-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://jacamo.sourceforge.net/maven2" }
    maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://jade.tilab.com/maven/" }
    flatDir {
       dirs 'lib'
    }
}

dependencies {
	compile 'org.jacamo:jacamo:0.8'
	compile 'org.jacamo:jacamo-rest:0.2-SNAPSHOT'
	testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:+'
}

sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}

task run (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo platform'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/main.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task bob (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/bob.jcm'
    classpath sourceSets.main.runtimeClasspath
}

// Bob for docker
task bob_d (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/bob-d.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task marcos (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs agent marcos'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/marcos.jcm'
    classpath sourceSets.main.runtimeClasspath
}
/*
task financial (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs financial agents'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/financial.jcm'
    classpath sourceSets.main.runtimeClasspath
}*/

task test1 (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs test'
    main 'jacamo.web.ClientTest'
    classpath sourceSets.main.runtimeClasspath
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: '.')
    //ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm,**/*.txt', srcdir: 'doc')
}

jar {
    baseName 'jacamo-web'
    manifest {
      attributes(
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
        'Main-Class': 'jacamo.infra.JaCaMoLauncher',
        'args': 'src/jcm/main.jcm'
      )
    }
}

task stage(dependsOn: ['jar', 'copyToLib', 'clean']) {
	copyToLib.mustRunAfter clean
	jar.mustRunAfter copyToLib
}

stage.dependsOn(copyToLib)

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    baseName 'jacamo-web'
    classifier = 'javadoc'
    from '${docsDir}/../../doc/api'
}

task sourceJar (type : Jar) {
    baseName 'jacamo-web'
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifactId 'jacamo-web'
        }
    }
}

// transfer local maven artifact to our maven2 repository at sourceforge
task publishMavenSF(dependsOn: [ 'build', 'publishToMavenLocal']) {
  doLast {
    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/jacamo-web'
    def tdir = 'jomifred,jacamo@web.sf.net:/home/project-web/jacamo/htdocs/maven2/org/jacamo/jacamo-web'
    exec {
        commandLine 'scp', '-r', project.version, tdir
        workingDir wdir
    }
    exec {
        commandLine 'cp', 'maven-metadata-local.xml', 'maven-metadata.xml'
        workingDir wdir
    }
    exec {
        commandLine 'scp', 'maven-metadata.xml', tdir
        workingDir wdir
    }
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
