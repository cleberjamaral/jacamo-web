/*
   Project JaCaMo web

   Gradle build file for JaCaMo Applications
   October 15, 2019
*/

plugins {
  id "java-library"
  id "eclipse"
  id "maven-publish"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.moowork.node" version "1.3.1"
}

defaultTasks 'run'

group   'org.jacamo'
version '0.5-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
	mavenCentral()
	maven { url "http://jacamo.sourceforge.net/maven2" }
	maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
	maven { url "https://jade.tilab.com/maven/" }
	flatDir {
		dirs 'lib'
	}
}

dependencies {
	implementation 'org.jacamo:jacamo:0.9-SNAPSHOT'
	implementation 'org.jacamo:jacamo-rest:0.5-SNAPSHOT'

	//websockets for simulations
	implementation 'javax.websocket:javax.websocket-api:1.1'
	implementation 'org.glassfish.tyrus:tyrus-server:1.1'
	implementation 'org.glassfish.tyrus:tyrus-container-grizzly:1.1'

	// https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
	implementation 'org.eclipse.jgit:org.eclipse.jgit:5.6.0.201912101111-r'

	// https://mvnrepository.com/artifact/net.openhft/compiler
	implementation 'net.openhft:compiler:2.3.1'
}

sourceSets {
	env {
		java {
            srcDir 'src/env'
		}
	}
    main {
        resources {
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/resources'
        }
    }
}

/*
 *
 * JaCaMo projects for lauch configuration and tests
 *
 */

task run (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo platform'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/main.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: '.')
    //ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm,**/*.txt', srcdir: 'doc')
}

jar {
    baseName 'jacamo-web'
    manifest {
      attributes(
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
        'Main-Class': 'jacamo.infra.JaCaMoLauncher',
        'args': 'src/jcm/main.jcm'
      )
    }
}

/*
 *
 * Heroku support
 *
 */

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}

task stage(dependsOn: ['shadowJar', 'copyToLib', 'clean']) {
	copyToLib.mustRunAfter clean
	jar.mustRunAfter copyToLib
}

stage.dependsOn(copyToLib)

/*
 *
 * Java Docs
 *
 */

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    baseName 'jacamo-web'
    classifier = 'javadoc'
    from '${docsDir}/../../doc/api'
}
/*
 *
 * Maven publication
 *
 */

task sourceJar (type : Jar) {
    baseName 'jacamo-web'
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifactId 'jacamo-web'
        }
    }
}

// transfer local maven artifact to our maven2 repository at sourceforge
task publishMavenSF(dependsOn: [ 'build', 'publishToMavenLocal']) {
  doLast {
    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/jacamo-web'
    def tdir = 'jomifred,jacamo@web.sf.net:/home/project-web/jacamo/htdocs/maven2/org/jacamo/jacamo-web'
    exec {
        commandLine 'scp', '-r', project.version, tdir
        workingDir wdir
    }
    exec {
        commandLine 'cp', 'maven-metadata-local.xml', 'maven-metadata.xml'
        workingDir wdir
    }
    exec {
        commandLine 'scp', 'maven-metadata.xml', tdir
        workingDir wdir
    }
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*
 *
 * NPM test javascripts
 *
 */

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */
    // Version of node to use.
    version = '10.14.1'
    // Version of yarn to use.
    yarnVersion = '1.15.2'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

String testsExecutedMarkerName = "${projectDir}/.tests.executed"
task testYarn(type: YarnTask, dependsOn: 'yarn') {
    dependsOn assemble
    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    environment CI: 'true'
    args = ['run', 'test']
    inputs.files fileTree('src/js')
    inputs.file 'yarn.lock'
    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}
check.dependsOn testYarn

task buildYarn(type: YarnTask, dependsOn: 'yarn') {
    dependsOn assemble
    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    environment CI: 'true'
    args = ['run', 'build']
    inputs.files fileTree('src/js')
    inputs.file 'yarn.lock'
}
build.dependsOn buildYarn

/*
 *
 * Clean compiled files
 *
 */

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
    delete testsExecutedMarkerName /*Used on testYarn*/
}